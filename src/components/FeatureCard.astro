---
// Astro Frontmatter
// Define the props this component expects (number, title, description, and the MP4 video URL)
interface Props {
    number: number;
    title: string;
    description: string;
    videoUrl: string; // Prop for the direct MP4 video URL
}
const { number, title, description, videoUrl } = Astro.props as Props;

// If you have a separate thumbnail image, you could define it here or pass it as another prop
// const thumbnailUrl = 'path/to/your/thumbnail.jpg';

---

{/* --- HTML Structure for a Feature Card --- */}
<article class="feature-card"> {/* Using <article> for semantics */}
  {/* Card number */}
  <div class="card-number">{number}</div>

  <!-- Container for title and description -->
  <div class="card-content">
    <h3>{title}</h3> <!-- Card title -->
    <p>{description}</p> <!-- Card description -->
  </div>

  <!-- Area for the MP4 Video -->
  <div class="video-area"> {/* Container for the video */}
    <!-- Using the <video> tag directly, showing a placeholder if no URL -->
    {videoUrl ? (
        <video autoplay loop muted playsinline preload="metadata"> {/* <-- Ensure these attributes are here, and 'controls' is REMOVED */}
            <source src={videoUrl} type="video/mp4" /> {/* Video source */}
            Your browser does not support the video tag. <!-- Fallback message -->
        </video>
    ) : (
        <!-- If no video URL, show a placeholder or leave it empty -->
        <div class="video-placeholder">Video not available</div> <!-- Example placeholder -->
    )}
  </div>
</article>
<style>
  /* Styles for the Feature Card */
  .feature-card {
    background-color: white; /* White background */
    border-radius: 8px; /* Rounded borders */
    padding: 2rem; /* Inner spacing */
    box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Subtle shadow */
    display: flex; /* Use flexbox for layout within the card */
    flex-direction: column; /* Stack content vertically */
    align-items: center; /* Align items to the centre horizontally */
    text-align: center; /* Centre text within the card */
    overflow: hidden; /* Hide any content that overflows the card */
    /* height: 100%; // Optional: ensure all cards have the same height if content varies */
  }

  .card-number {
    font-size: 3rem; /* Large size for the number */
    font-weight: bold;
    color: #007bff; /* Example accent colour (blue) */
    margin-bottom: 1rem; /* Space below the number */
  }

  .card-content {
      margin-bottom: 1rem; /* Space between description and video area */
      width: 100%; /* Ensure content takes full width */
      text-align: center; /* Centre text within content */
  }

  .card-content h3 {
    font-size: 1.5rem; /* Title size */
    margin-top: 0;
    margin-bottom: 0.5rem; /* Space below title */
    color: #333;
    text-align: center; /* Centre title */
  }

  .card-content p {
    font-size: 1rem; /* Description size */
    color: #555;
    line-height: 1.5; /* Line spacing */
    text-align: center; /* Centre description */
  }

  /* --- Styles for the MP4 Video Area --- */
  .video-area {
      width: 100%; /* Take full width of the card */
      position: relative;
      cursor: pointer; /* Can be interactive (e.g., click to play/pause) */
      overflow: hidden;
      border-radius: 4px;
      /* --- Force 16:9 aspect ratio --- */
      padding-bottom: 56.25%; /* 16:9 Aspect Ratio (9 / 16 * 100 = 56.25) */
      height: 0; /* Set height to 0 when using padding-bottom for aspect ratio */
  }

  /* Styles for the <video> tag within the area (will be positioned over the padding) */
  .video-area video {
      position: absolute; /* Position absolutely over the padding */
      top: 0;
      left: 0;
      width: 100%; /* Take 100% of the parent container (.video-area) */
      height: 100%; /* Take 100% of the parent container */
      display: block;
  }


  /* Optional: Style for the placeholder text if no video ID */
  .video-placeholder {
      width: 100%;
      padding: 2rem 1rem;
      background-color: #eee;
      color: #666;
      text-align: center;
  }

</style>

<!-- --- JavaScript Script (Empty for now) --- -->
<script>
  // Note: Autoplay relies on browser policies (needs muted, sometimes user interaction)

  // Example: Play/pause on click (alternative to autoplay)
  // const videoArea = document.querySelector('.video-area');
  // const video = videoArea?.querySelector('video');

  // if (videoArea && video && !video.autoplay) { // Check if autoplay is NOT enabled by browser
  //   videoArea.addEventListener('click', () => {
  //     if (video.paused) {
  //       video.play();
  //     } else {
  //       video.pause();
  //     }
  //   });
  // }
</script>